Streams {
    * Появились в Java8, вместе с lambdas & method references
    * Обработка конечных и потенциально бесконечных наборов данных
    * Декларированный подход к обработке данных: описываем что хотим получить, а не как мы хотим это получить.
    * Прозрачный параллелизм
}

Пример {
    //Преобразуем поток в поток 
    List<Block> blocks = ...;
    
    Stream<Block> bloskStream = blocks.stream();

    Stream<SquashedBlock> squashedStream =
    blockStream.map(Block::squash);
        

    // Фильтруем
    Stream<SquashedBlock> filtederStream =
        squashedStream.filter(block ->
            block.getColor() != YELLOW);

    filterStream.forEach(System.out::println);
    
    // Или можно одной строкой:
    blocks.stream()
        .map(Block::squash)
        .filter(block ->
            block.getColor() != YELLOW)
        .forEach(System.out::println);
}

Три категории методов Stream API {
    // Создание стрима
    List<String> names = menu.stream();

    // Промежуточные операции
        .filter(d -> d.getCalories() > 300)
        .map(Dish::getName)
        .limit(3)

    // Терминальная операция
        .collect(Collectors.toList());

}

Создание стрима {
    // Пустого
    Stream<Foo> stream0 = Stream.empty();

    // Перечисление элементов
    Stream<String> stream1 =
            Stream.of("gently", "down", "the", "stream");

    // Из массива
    Stream<String> stream2 =
            Arrays.stream("gently down the stream".split(" "));

    // Из коллекции
    List<String> strings = ...
    Stream<String> stream3 = strings.stream();

    // Из API
    Path path = Paths.get(...);
    Stream<Path> stream4 = Files.list(path);
}

Фичи {
    Конкатенация стримов {
        Stream<Foo> s1 = ...;
        Stream<Foo> s2 = ...;
        Stream<Foo> s = Stream.concat(s1, s2);
    }

    Порождение стримов (generate) {
        // С помощью генератора
        Stream<Double> rabdoms = 
            Stream.generate(Math::random);
            
            // ХОТЯ ЛУЧШЕ
            DoubleStream doubles =
                ThreadLocalRandom.current().doubles();

    }

    Порождение стримов (iterate) {
        // Итеративно
        Stream<Integer> integers = 
            Stream.iterate(0, x -> x + 1);
            
            // ХОТЯ ЛУЧШЕ
            IntStream range = IntStream.range(0, 1000);
    }

    Пример для чисел Фибоначчи {
        Stream.iterate(new int[]{0, 1}, 
                t -> new int[]{t[1], t[0] + t[1]})
            .mapToInt(t -> t[0]);
    }

    Spliterator: Самый общий способ создания стрима {
        public  interface Spiterator<T> {
            boolean tryAdvance(Consumer<? super T> action);
            Spliterator<T> trySplit();
            long estimateSize();
            int characteristics();
        }

        StreamSupport.stream(Spliterator<T> spliterator, boolean parallel);
    }

    Характеристики сплитератора {
        ORDERED,
        DISTINCT,
        SORTED,
        SIZED,
        NONNULL,
        IMMUTABLE,
        CONCURENT,
        SUBSIZED
    }
}

Промежуточные итоги {
    * Есть много стандартных способов порождения стримов, для простых случаев не надо "изобретать велосипедЭ
    * Скорей всего, вам не понадобиться самому реализовывать Spliterator
    * Быстродеёствия ради, есть "примитивные стримы" (три типа):
        * IntStream (эффективнее, чем Stream<Integer>
        * LongStream
        * DoubleStream
}

Преобразование стримов в стримы: получение "головы" и "хвоста" {
    // методы интерфейса Stream

    // голова
    Stream<T> limit(long maxSize);
    Stream<T> takeWhile(Predicate<? super T> predicate)

    // хвост
    Stream<T> skip(long n)
    Stream<T> dropWhile(Predicate<? super T> predicate)
}

Продолжение фич {
    filter {
        Stream<T> filter(
            Predicate<? super T> predicate);
    }

    map {
        <R> Stream<R> map(Function<? super T, 
                                    ? extends R> mapper);

        IntStream mapToInt(
                    ToIntFunction<? super T> mapper);

        LongStream mapToLong(
                    ToLongFunction<? super T> mapper);

        DoubleStream(
                    ... );
    }

    flatMap {
        Path path = ...
        Pattern separator = Patter,compile("\\s");
        
        try(Strem<String> line = Files.lines(path, StandartCharsets.UTF_8)) {
            // НЕ ТО, что нам надо!
            // Stream<Stream<String>> streamString =
            //                      lines.map(separator::splitAsStream);

            // То, что нам надо!
            Stream<String> words = lined.flatMap(separator::splitAsAtream);
            words.forEach(System.out::println);
        }

        /* А также
          flatMapToDoubel
          flatMapToInt
          flatMapToLong
          */
    }

    distinct {
        // Внутренний Set

        Stream.of(1, 5, 8, 7, 8, 5, 9, 9)
            .distinct()
            .forEach(System.out::println);
        
        // Выведет 1, 5, 8, 7, 9

        // С ним надо быть осторождее, программа может зависнуть
        // Привер:
        ThreadLocalRandom.current().ints(1, 10)
            .distinct()
            .forEach(System.out::println);
            // Программа зависнет, когда все значения от 1 до 10. Можно
            // пофиксить, например, указав limit(9) после distinct.
    }

    sorted {
        // Внутренний отсортированный список
        
        Stream.of(1, 2, 8, 7, 8, 5, 9, 9)
            .sorted()
            .forEach(System.out::println);

        // Выведет 1, 5, 5, 7, 8, 8, 9, 9,
    
        // Не имеет смысла для бесконечных стримов
    }

    peek (отладочный метод) {
        * Не меняет исходный стрим
        * Предназначен для "подглядывания" за промежуточным состоянием элементов
        * В качестве аргумента часто используется Syste.out::println
        * При параллельных вычислениях может быть вызван в произвольном порядке в проивзольном потоке выполнения

        Stream<T> ppek(Consumer<? super T> action);
    }
}

Терминальные операции {
    // Предъяви первый элемент
    Optional<T> findFirst();
    // Предъяви любой элемент
    Oprional<T> finaAny(); // более хорошая практика


    // Проверь, удовлетворяет ли условию...
    //...какой-то
    boolean anyMatch(Predicate<? super T> predicate);
    //...все
    boolean allMatch(...);
    //...никакой
    boolean noneMatch(...);

    // КОРОТКИЕ ЗАМЫКАНИЯ!


    forEach {
        void forEach(Consumer<? super T> action);
            * В случае параллельного выполнения нет гарантий последовательности
            * Нет гарантий относительно того, в каком потоке будет выполнена лямбда
    }

    reduce (with identity) {
        * Ассоциативная функция + "identity value"
        * Промежуточные результаты - immutable values
        * Вопрос: назовите примеры ассоциативных операций в маткматике?

        T reuce(T identity, 
            BinaryOperator<T> accumulator);

        // Parallel reduce
    }

    reduce (without identity) {
        * identity не нужно, но и результата может не получиться (если стрим пустой)
        // пример - min и max

        Optional<T> reduce(
            BinaryOperator<T> accumulator);
    }

    Готовые редьюсы {
        * Доступ во всех стримах:
            * count - в общем случае требует пересчёта всех элементов O(n)! 
            * max(Comparator), min(Comparator)

        * Доступные в стримах примитивов:
            * sum
            * average
            * summaryStatistics - count, sum, min и max "в одном флаконе"
    }
}

Collect: самый гибки метод сборки результатов {
    * Типовые параметры:
        * T - тип элементов стрима
        * A - тип аккумуляторв, промежуточной структуры данных, в которой всё собирается
        * R - тип результата

    * В отличие от reduce, работающего с иммутабельными объектами, мутирует аккумулятор.
    
    <R, A> R collect(Collector<? super T, A, R> collector);

    
    
    public interface Collector<T, A, R> {
        Supplier<A> supplier();                 // дай нам аккумулятор
        BiConsumer<A, T> accumulator();         // возьми аккумулятор, обнови и верни его
        Function<A, R> finisher();              // результат из аккумулятора
        BinaryOperator<A> combiner();           // объединяем аккумуляторы из двух параллельных стримов
        Set<Characteristics> characteristics(); // набор "волшебных" флагов
    }

    // например:
    class ToListCollector<T> implements
            Collector<T, List<T>, List<T>>

    Характеристики коллектора {
        CONCURRENT
        UNORDERED
        IDENTITY_FINISH
    }

    // Сделать свой коллектор непросто,
    // Но сила коллекторов в том, что есть много готовых и их можно комбинировать!

    Наиболее употребляемые коллекторы {
        // java.util.stream.Collections
        Collector<T, ?, List<T>> toList()
        Collector<T, ?, Set<T>> toSet()
        Collector<T, ?, C extends Collection<T>>
            toCollection(Supplier<C> collectionFactory)

        // Пример приненения
        Stream myStream = ...
        List<Foo> list = myStream.collect(Collectors.toList());
    }

    Сбор в мапы {
        Collector<T, ?, Map<K, U>> toMap(
            Function<? super T, ? ectends K> keyMapper,
            Function<? super T, ? ectends U> valueMapper)

        // Пример применения
        Stream<Person> people = ...
        Map<Integer, Person> idToPerson = people.collect(
            Collectors.toMap(Person::getId, p -> p);
        
        * Также можно указывать mergeFunction и mapSupplier
    }

    Варимации на тему сборки в коллекции {
        * С помощью toUnmodifiable(List|Set|Map) можно сразу получить неизменяемую коллекцию
        * toConcurrentMap можно сразу получить потокообразную мапу.
    }

    Строка с разделителями {
        Static Collector<CharSequence, ?, String> joining()
    
        // Пример использования
        MenuStream.map(Dish::getName).collect(Collectors.joining(", "));

        // Не забываем про то, что это же можно сдулать и без стримов:
        static String join(CharSequence delimiter, 
                    Itrrable<? extends CharSequence> elements)
    }
}

Группировки {
    Map<Dish.Type, List<Dish>> dishByType =
        menu.stream().collect(Collectors.groupingBy(Dish::getType));


    // Downstream Collectors:
    Map<Dish.Type, Map<Dish.CaloricLevel, List<Dish>>>
        dishesByTypeAndCaloticLevel =
            menu.stream().collect(Collectors
                .groupBy(Dish::getType,
                    Collectors.groupingBy(Dish::getCaloricLevel)));

    // Но мы можем не только группировать в цепочке!
    Map<Dish.Type, Long> typeCount =
        menu.stream().collect(Collectors
            .groupingBy(Dish::getType, Collectors.counting()));
    
    // Набор downstream collectors
    /* Всё это уже есть в стримах, но нам не надо применить это
        к "разветвлённому" стриму.*/

    /*"Терминальные"*/
    counting()
    summingInt(ToIntFunction<? super T> mapper)
    summingLong(...)
    summingDouble(...)
    maxBy(Comparator<? super T> comparator)
    minBy(...)


    /*С возможностью продолжить цепочку*/
    filtering(Predicate<? super T> predicate, downstream)
    mapping(Function<? super T, ? extends U> mapper, downstream)
    flatMapping(Function<? super T,
        ? extends Stream<? extends U>> mapper, downstream)
    
    /*Адаптор*/
    collectingAndThen(Collector<T, A, R> downstream, 
        Function<R, R> finisher)
    /*Пример, когда он нужен:*/
    Map<Dish.Type, Dish> mostCalorecByType =
        menu.stream()
            .collect(Collectors.gropingBy(Dish::getType,
                collectingAndThen( // <----- АДАПТОР
                    Collectors.maxBy(Comparator
                        .comparingInt(Dish::getCalories),
                    // maxBy возвращает Optional
                Optional::get)));
}

ЛУЧШЕ ДЕЛАТЬ СТРИМАМИ, А НЕ КОЛЛЕКТОРЫ

Параллельные стримы {
    * Метод .parallel() включает параллелизацию обработки
    * parallel можно вызывать в любом месте цепочки вызовов
    * Пользоваться надо с осторожностью, понимая ограничения и применимость
}

Optional: контейнер, который содержит объект. Или не содержит {
    Optional<T> - как стрим из 0 или 1 элемента {
        // Создание
        Optional.empty();       // пустой
        Optional.of();          // NPE если x == null
        Optional.ofNullable(x); // пустой или с x-ом

        // Расчехление
        o.get();
        o.orElse(other);
        o.orElseGet(() -> calcOther());
        o.otRlseThrow(() -> new IllegalStateException());
    }

    Optional.map {
        Optional<Interface> optInsurance = Optional.ofNullable(insurance);
        Optional<String> name = optInsurance.map(Insurance::getName);
    }

    Optional.flatMap {
        Optional<Person> person = ...
        
        // peson.map(Person::getCar) вернёт Optional<Optional<Car>>!!

        String insuranceName = person.flatMap(Person::getCar)
                                        .flatMap(Car::getInsurance)
                                        .map(Insurance::getName)
                                        .ofElse("Unknown");
    }

    Optinal.filter {
        String unsuranceName = person.filter(p -> p.getAge() >= minAge)
                                        .flatMap(Person::getCar)
                                        .flatMap(Car::getInsurance)
                                        .map(Insurance::getName)
                                        .orElse("Unknown");
    }

    Привила использования Optional {
        "Лобовое" использование Optional - хуже, чем null:
        ПЛОХО                       | НОРМАЛЬНО
        if (o.isPresent())          | if (o != null)
            o.get().someMethod();   |     o.someMethod();

        * Переменная с типом Optional никогда не должна быть null
        * Поля с типом Optional бесполезны: проверка на "непустоту" этого поля не 
            лучше проверки на null, цена - дополнительный объект
        * Не кладите Optional-ы в коллекции
        * В целом, Optional - для возвращаемых значений, ане для аргументов методов.
    }
}

Когда стримы использовать не нужно {
    * Стримы многим нравятся
    * Иногда люди перестают думать и случается "стримоз"
    * Тагир Валеев: Используйте Stream API проще (или не используйте вообще)
}

Выводы {
    * "Декларативный" подход к использованию стримов, "описываем что, а не как"
        не отменяет понимания тот, как происходит вычисления
    * Применять стримы надо с умом, в много где их и не надо применять
}
