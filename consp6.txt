Core Java
Generics

Определяем свой собственный параметризованный класс:
puclic class Pair<T> {
    private T first;
    private T second;

    public Pair() { 
        first = null; 
        second = null; 
    }
    
    public Pair(T first, T second) {
        this.first  = first;
        this.second = second;
    }
    
    public T getFirst() {
        return first;
    }
    
    public T getSecond() {
        return second;
    }
    
    public void setFirst(T newValue) {
        first = newValue;
    }
    
    public void setSecond(T newValue) {
        second = newValue;
    }
}

Generic methods {
    public <T> T getRandomItem(T... items) {
        return items[ThreadLocalRandom.current().nextInt(items.length)];
    }
    
    String s = getRandomItem("A", "B", "C");
    Manager m = getRadomItem(ceo, cto, cfo);
}

Bounded types:
public <T extends Person> String getRandomPersonName(List<T> items) {
    Person result = // можно написать и T result =
        items.get(ThreadLocalRandom.current().nextInt(items.size()));

    return result.getName();
}
// можно через амперсанд сколько угодно интерфейсов, но не более одного класса
// public <T extends Person & Payable> ...

Не упротреблять сырые типы!!!

class Pair<T> {
    T newValue {
        return new T(); // compilation error!!!
    }
}
// решение при помощи метакласса и рефлекции (о которой речь впереди)
class Container<T> {
    // bounded wildcard type, речь впереди
    Class<? extends T> clazz;

    Container(Class<? extends T> clazz) {
        this.clazz = clazz;
    }

    T newInstance() throws ReflectiveOperationException {
        // если нашёлся открытый конструктор без параметров!
        return clazz.newInstance();
    }
}
Container<Employee> container1 = new Container<>(Employee.class);

Массивы и дженерики - лютые враги
Varargs - всё равно массив...
@SafeVarargs - честно, не буду устраивать heap pollution!:
* не записывать ничего в элементы массива
* не рздавать ссылку на массив параметров наружу

Нельзя параметризовать:
* Исключения
* Анонимные классы
* Enum-ы

Нельзя использовать в статическо контексте
public class Container<T> {
    private static T value; // не скомпилируется
    public static T getValue(); // не скомпилируется
}
// сатический контекст один на всех!!!

// Нельзя реализовывать разные параметризации одного и того же интерфейса!

Ковариантность массивов VS инвариантность дженериков

Wildcard Types {
    class List<E> {
        // для List<Employee> "пролезет" List<Manager>!!
        void addAllFrom (List<? extends E> list) {
            for (E item: list)
                add(item);
        }
    }

    // что можно делать с объектом, типизированным ? extends?

    List<? extends E> list = ...
    // это понятно
    E e1 = list.get(...);

    E e2 = ...;
    // не скомпилируется! ПОЧЕМУ??
    list.add(e2);
    // скомпилируется. ПОЧЕМУ?
    list.add(null);

    В общем, addAllTo реализовать не получится...


    В обратную сторону (контрвариантные типы)
    class List<E> {
        // для List<Employee> "пролезет" List<Person>!!
        void addAllTo (List<? super E> list) {
            for (E item: this)
                list.add(item);
        }
    }

    // что можно делать с объектом, типизированным ? super?
    List<? super E> list = ...
    E e1 = ...;
    // скомпилируется!
    list.add(e1);
    list.add(null);
    
    // Только Object. ПОЧЕМУ??
    Object e2 = list.get(...);


    Unbounded wildcard
    * List<?> - это то же, что List<? extends Object>
    * Брать элементы можем, но тип только Object
    * Класть можем только null


    Правила использование wildcard-типов:
    * Используются в аргументах методов и локальных переменных
    * Невидимы пользователю API, не должны возвращаться
    * Их цель - принимать те аргументы, которые надо принимать, и отвергать те аргументы, которые надо отвергать
    * Должнгы быть используемы в APIm иначе API будет слишком "жёстким" и непригодным для использования


    Wildcard Capture
    public static void swap(Pair<?> p) {
        Object f = p.getFirst();
        Object s = p.getSecond();
        // УУУППС!!
        // (мы знаем, что они правильного типа,
        //  но ничего не можем поделать)
        p.setFirst(...);
        p.setSecond(...);
    }
    Метод с type capture {
        public static void swap(Pair<?> p) {
            return swapHelper(p);
        }
        
        private static <T> void swapHelper(Pair<T> p) {
            T f = p.getFirst();
            p.getFirst(p.getSecond());
            p.setSecond(f);
        {
    }
}

Recursive Generics {
    class Holder<E, SELF extends Holder<E, SELF>> {
        E value;
        SELF setValue(E value) {
            this.value = value;
            return (SELF) this;
        {
    }
    
    class StringHolder extends Holder<String, StringHolder> {
        void doSmth() {...};
    }

    StringHolder h = new StringHolder().setValue("aaa").doSmth();
}

Effective Java! J.Bloch


